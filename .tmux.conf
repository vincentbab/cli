### Adapted from: https://github.com/samoshkin/tmux-config/blob/master/tmux/tmux.conf
### Don't use tmux plugins for easier setup

#################
# Main settings #
#################

set -g default-terminal "screen-256color"
set -g history-limit 20000
set -g buffer-limit 20
set -sg escape-time 50        # https://github.com/microsoft/WSL/issues/5931
set -g display-time 1500
set -g remain-on-exit off
set -g repeat-time 300
setw -g allow-rename off
setw -g automatic-rename off
setw -g aggressive-resize on
set -g set-clipboard on

# Change prefix key to C-a, easier to type, same to "screen"
unbind C-b
set -g prefix C-a

# Set parent terminal title to reflect current window in tmux session 
set -g set-titles on
set -g set-titles-string "$USER@#H #I:#W"

# Start index of window/pane with 1, because we're humans, not computers
set -g base-index 1
setw -g pane-base-index 1

# Enable mouse support
set -g mouse on

#############
# Key binds #
#############

# Unbind default key bindings, we're going to override
unbind "\$" # rename-session
unbind ,    # rename-window
unbind %    # split-window -h
unbind '"'  # split-window
unbind "}"    # swap-pane -D
unbind "{"    # swap-pane -U
unbind "["    # paste-buffer
unbind "]"    
unbind "'"  # select-window
unbind n    # next-window
unbind p    # previous-window
unbind l    # last-window
unbind M-n  # next window with alert
unbind M-p  # next window with alert
unbind o    # focus thru panes
unbind &    # kill-window
unbind "#"  # list-buffer 
unbind =    # choose-buffer
unbind z    # zoom-pane
unbind M-Up  # resize 5 rows up
unbind M-Down # resize 5 rows down
unbind M-Right # resize 5 rows right
unbind M-Left # resize 5 rows left


# Edit configuration and reload
bind C-e new-window -n 'tmux.conf' "sh -c '\${EDITOR:-vim} ~/.tmux.conf && tmux source ~/.tmux.conf && tmux display \"Config reloaded\"'"

# Reload tmux configuration 
bind C-r source-file ~/.tmux.conf \; display "Config reloaded"

# new window and retain cwd
bind c new-window -c "#{pane_current_path}"

# Prompt to rename window right after it's created
set-hook -g after-new-window 'command-prompt -I "#{window_name}" "rename-window '%%'"'

# Rename session and window
bind r command-prompt -I "#{window_name}" "rename-window '%%'"
bind R command-prompt -I "#{session_name}" "rename-session '%%'"

# Split panes
bind | split-window -h -c "#{pane_current_path}"
bind _ split-window -v -c "#{pane_current_path}"

# Select pane and windows
bind -r p previous-window
bind -r n next-window
bind -r [ select-pane -t :.-
bind -r ] select-pane -t :.+
bind -r Tab last-window   # cycle thru MRU tabs
bind -r C-o swap-pane -D

# Zoom pane
bind + resize-pane -Z

# Link window
bind L command-prompt -p "Link window from (session:window): " "link-window -s %% -a"

# Kill pane/window/session shortcuts
bind x kill-pane
bind X kill-window
bind C-x confirm-before -p "kill other windows? (y/n)" "kill-window -a"
bind Q confirm-before -p "kill-session #S? (y/n)" kill-session

# Merge session with another one (e.g. move all windows)
# If you use adhoc 1-window sessions, and you want to preserve session upon exit
# but don't want to create a lot of small unnamed 1-window sessions around
# move all windows from current session to main named one (dev, work, etc)
bind C-u command-prompt -p "Session to merge with: " \
   "run-shell 'yes | head -n #{session_windows} | xargs -I {} -n 1 tmux movew -t %%'"

# Detach from session
bind d detach
bind D if -F '#{session_many_attached}' \
    'confirm-before -p "Detach other clients? (y/n)" "detach -a"' \
    'display "Session has only 1 client attached"'

# Hide status bar on demand
bind C-s if -F '#{s/off//:status}' 'set status off' 'set status on'

#########
# Style #
#########

color_dark="colour235"
color_light="white"
color_session_text="colour39"
color_status_text="colour245"
color_main="colour$HOST_COLOR"
color_secondary="colour$HOST_COLOR"
color_level_ok="colour076"
color_level_warn="colour208"
color_level_stress="colour160"
color_window_off_indicator="colour088"
color_window_off_status_bg="colour238"
color_window_off_status_current_bg="colour254"


set -g mode-style "fg=default,bg=$color_main"

# command line style
set -g message-style "fg=$color_main,bg=$color_dark"

# status line style
set -g status-style "fg=$color_status_text,bg=$color_dark"

# window segments in status line
set -g window-status-separator ""
separator_powerline_left="î‚²"
separator_powerline_right="î‚°"

# setw -g window-status-style "fg=$color_status_text,bg=$color_dark"
setw -g window-status-format " #I:#W "
setw -g window-status-current-style "fg=$color_dark,bold,bg=$color_main"
setw -g window-status-current-format "#[fg=$color_dark,bg=$color_main]$separator_powerline_right#[default] #I:#W #[fg=$color_main,bg=$color_dark]$separator_powerline_right#[default]"

# when window has monitoring notification
setw -g window-status-activity-style "fg=$color_main"

# outline for active pane
setw -g pane-active-border-style "fg=$color_main"

# general status bar settings
set -g status on
set -g status-interval 2
set -g status-position top
set -g status-justify left
set -g status-right-length 100

set -g status-left "#[fg=$color_main] #S #[default]"
set -g status-right "âš¡CPU: #[fg=$color_main]#({ grep 'cpu ' /proc/stat; sleep 1; grep 'cpu ' /proc/stat; } | awk 'NR==1 {u1=$2+$4; t1=$2+$4+$5; next} {printf \"%.2f\", ($2+$4-u1) * 100 / ($2+$4+$5-t1);}')%#[default] |ðŸ§® RAM: #[fg=$color_main]#(awk '/MemTotal/ {total=$2} /MemAvailable/ {available=$2} END {print int((total - available) / total * 100)}' /proc/meminfo)% #[default]|ðŸ“Š #[fg=$color_main]#(cat /proc/loadavg | awk '{print $1, $2, $3}')#[default] |ðŸ•’ #(date '+%H:%M %d/%m/%Y')"
